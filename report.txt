Useful links:
Open Quantum Safe: https://github.com/open-quantum-safe/liboqs/tree/main
Clean implementations: https://github.com/PQClean/PQClean/tree/master
CRYSTALS-Kyber: https://github.com/pq-crystals/kyber
Sample App for Open Qauntum Safe: https://github.com/Hatzen/LibOQSTestApp
Python Wrapper for Liboqs: https://github.com/open-quantum-safe/liboqs-python/tree/main
Rust Wrapper for Liboqs: https://github.com/open-quantum-safe/liboqs-rust
Java Wrapper of Open Quantum Safe: https://github.com/open-quantum-safe/liboqs-java

NIST:
Quantum-resistant digital signature (like SPHINCS+) and key encapsulation mechanisms,


Standardized so far:

Key encapsulation mechanism: CRYSTALS-Kyber {learning-with-errors (LWE) problem over module lattices}
Signature schemes: CRYSTALS-Dilithium, Falcon, and SPHINCS+



Some of the proposed solutions so far:

1) Learning with errors/ Ring learning with errors              {BASE OF Kyber}
2) Supersingular Isogeny Key Encapsulation (SIKE &  SIDH)       {NOT APPROVED - https://csrc.nist.gov/csrc/media/Projects/post-quantum-cryptography/documents/round-4/submissions/SIKE-spec.pdf}
3) Winternitz One Time Signature                                {BASE OF LMS and XMSS}
4) Leighton-Micali Signature scheme                             {APPROVED - https://www.nist.gov/news-events/news/2020/10/recommendation-stateful-hash-based-signature-schemes-nist-sp-800-208}
5) eXtended Merkle Signature Scheme                             {APPROVED}


NIST:

1) CRYSTALS-Kyber (official implementation: https://github.com/pq-crystals/kyber)


2) SIKE and SIDH are insecure and should not be used:
Because of the proposed key recovery attack proposed by Castryck and Decru (https://eprint.iacr.org/2022/975)

Isogeny-based schemes use the mathematics of supersingular elliptic curves to create a Diffieâ€“Hellman-like key exchange.

Moriya and Fouotsa have independently proposed different approaches to modifying
SIDH to avoid the Castryck and Decru family of attacks, but both of these proposals severely degrade the
performance and key size of SIDH by at least an order of magnitude.

The general consensus at this time
is that there is no known variant of SIDH which both retains roughly the same performance characteristics
as what was originally proposed while also remaining secure.

"Although there are no other active isogeny-based candidates participating in the NIST standardization
process, we hope that research and development into isogeny-based cryptosystems will continue and that
the post-quantum research community will continue to support and participate in such work"

3) Leighton-Micali Signature scheme:











KEM: {NOT SECURE FOR POST QUANTUM}

KEM, or Key Encapsulation Mechanism, is a cryptographic protocol used primarily for securing key exchange in public key 
cryptography. KEM allows two parties to securely exchange encryption keys over an insecure channel. Instead of directly 
encrypting the keys, KEM encapsulates the key inside a secure message. This mechanism is often used in hybrid encryption 
systems where the exchanged key is then used for symmetric encryption, combining the benefits of both symmetric and 
asymmetric cryptography. KEM ensures that even if the key exchange process is intercepted, the encapsulated key remains 
secure.

Steps:

1) Encrypt the message using symmetric key encryption
2) Encrypt the key using assymetric key encryption (public key) and attach encrypted private key to message {ASSYMETRIC KEY ENCRYTION IS HEAVY}
3) Reciever uses his private key to decrypt the encrypted priavte key first
4) Reciever decrypts the message using the decrypted private key






